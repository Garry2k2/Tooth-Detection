# -*- coding: utf-8 -*-
"""postprocess

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_y2WwhEyG-ZYMb-nFCV2N0JxVdg9Bcnt
"""

"""
postprocess.py – OralVis Tooth Numbering Post-Processing

This script provides helper functions to convert YOLO detections
into FDI numbering (11–48) by splitting arches and quadrants,
sorting detections, and handling missing teeth.

Author: Gaurav Saidane
"""

import numpy as np

# ------------------------------
# Utility Functions
# ------------------------------

def split_arches(detections, img_height, margin=0.05):
    """
    Split detections into upper and lower arches.

    Args:
        detections (list): [x_center, y_center, w, h, conf, cls]
        img_height (int): height of the image
        margin (float): tolerance around midline

    Returns:
        upper, lower (lists of detections)
    """
    mid_y = img_height / 2
    upper, lower = [], []
    for det in detections:
        _, y, _, _, _, _ = det
        if y < mid_y - margin * img_height:
            upper.append(det)
        else:
            lower.append(det)
    return upper, lower


def split_quadrants(detections, img_width, margin=0.05):
    """
    Split detections into left and right quadrants.
    """
    mid_x = img_width / 2
    left, right = [], []
    for det in detections:
        x, _, _, _, _, _ = det
        if x < mid_x - margin * img_width:
            left.append(det)
        else:
            right.append(det)
    return left, right


def sort_teeth(detections, left_to_right=True):
    """
    Sort teeth horizontally within a quadrant.
    """
    if left_to_right:
        return sorted(detections, key=lambda d: d[0])  # x coordinate
    else:
        return sorted(detections, key=lambda d: d[0], reverse=True)


# ------------------------------
# FDI Numbering
# ------------------------------

def assign_fdi_ids(upper, lower):
    """
    Assign FDI IDs (11–48) to detections.

    Args:
        upper (list): detections in upper arch
        lower (list): detections in lower arch

    Returns:
        dict: {FDI_number: detection}
    """
    fdi_map = {}

    # Split quadrants
    upper_left, upper_right = split_quadrants(upper, img_width=1000)
    lower_left, lower_right = split_quadrants(lower, img_width=1000)

    # Sort detections
    upper_right_sorted = sort_teeth(upper_right, left_to_right=False)  # 11–18
    upper_left_sorted  = sort_teeth(upper_left,  left_to_right=True)   # 21–28
    lower_left_sorted  = sort_teeth(lower_left,  left_to_right=True)   # 31–38
    lower_right_sorted = sort_teeth(lower_right, left_to_right=False)  # 41–48

    # Assign IDs
    for i, det in enumerate(upper_right_sorted[:8], start=11):
        fdi_map[i] = det
    for i, det in enumerate(upper_left_sorted[:8], start=21):
        fdi_map[i] = det
    for i, det in enumerate(lower_left_sorted[:8], start=31):
        fdi_map[i] = det
    for i, det in enumerate(lower_right_sorted[:8], start=41):
        fdi_map[i] = det

    return fdi_map


# ------------------------------
# Example Pipeline
# ------------------------------

def process_detections(detections, img_width, img_height):
    """
    Full pipeline: split → sort → assign FDI IDs.

    Args:
        detections (list of lists): YOLO format [x_center, y_center, w, h, conf, cls]
        img_width (int)
        img_height (int)

    Returns:
        dict: {FDI_number: detection}
    """
    # Split arches
    upper, lower = split_arches(detections, img_height)

    # Assign FDI numbers
    fdi_mapping = assign_fdi_ids(upper, lower)

    return fdi_mapping


# ------------------------------
# Example Usage
# ------------------------------
if __name__ == "__main__":
    # Example fake detections: [x_center, y_center, w, h, conf, cls]
    sample_detections = [
        [200, 100, 50, 50, 0.9, 0],  # one tooth
        [400, 100, 50, 50, 0.8, 0],  # another
        [600, 400, 50, 50, 0.95, 0], # lower arch
    ]
    img_w, img_h = 1000, 500

    fdi = process_detections(sample_detections, img_w, img_h)
    for tooth_id, det in fdi.items():
        print(f"FDI {tooth_id}: {det}")